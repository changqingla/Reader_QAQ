upstream backend_api {
    # Docker 容器访问宿主机服务（后端运行在 13000 端口）
    server host.docker.internal:13000;
}

upstream minio_server {
    # MinIO 在 Docker 网络内
    server reader_minio:9000;
}

server {
    listen 80;
    server_name _;
    
    client_max_body_size 100M;
    
    access_log /var/log/nginx/reader_qaq_access.log;
    error_log /var/log/nginx/reader_qaq_error.log;
    
    # 后端 API
    location /api/ {
        proxy_pass http://backend_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
    }
    
    # MinIO
    location /minio/ {
        rewrite ^/minio/(.*)$ /$1 break;
        proxy_pass http://minio_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
        proxy_request_buffering off;
    }
    
    # 前端静态文件
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        
        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # HTML 不缓存
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
    }
    
    # 健康检查
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }
}
